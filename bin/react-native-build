#!/usr/bin/env node
//react-native bundle --entry-file ./main.js --bundle-output ./android/app/src/main/assets/index.android.bundle --platform android --assets-dest ./android/app/src/main/res --dev false

var commander = require('commander');

commander.version(require('../package').version)
    .usage('[options] build')
    .option('-e --entry','input your app entry file.')
    .option('-a --bulildapk','input your react-native android path.')
    .parse(process.argv);


if(!commander.args.length){
    return commander.help();
}

var entry = commander.args[0];
var path = commander.args[1];
var exec = require('child_process').exec;
var fs = require('fs');

;( () => new Promise( (resolve,reject) => {

    exec('cd '+path.replace('/android',''),function(err,stdout,stderr){
        if(err){
            throw err;
        }
        resolve(stdout);
    });
        
} ) )().then( () => new Promise( (resolve,reject) => {
    
    var fsExist = fs.existsSync(path+"/app/src/main/assets/");
    if(!fsExist){
        fs.mkdirSync(path+"/app/src/main/assets/");
    }

    resolve();
    
} ) ).then( () => new Promise( (resolve,reject) => {
    
    try{
        exec(`cd ${path.replace('/android','')} && react-native bundle --entry-file ${entry} --bundle-output ${path}/app/src/main/assets/index.android.bundle --platform android --assets-dest ${path}/app/src/main/res --dev false`,function(err,stdout,stderr){
            resolve(stdout);
        });
    }catch(e){
        throw 'Error! running "react-native start" before.';
    }
    
} ) ).then( () => new Promise( (resolve,reject) => {
    
    exec('cd '+path,function(err,stdout,stderr){
        if(err){
            throw err;
        }
        resolve(stdout);
    });
    
} ) ).then( () => new Promise( (resolve,reject) => {
    
    try{
        exec("curl -k 'http://localhost:8081/index.android.bundle' > "+path+"/app/src/main/assets/index.android.bundle",function(err,stdout,stderr){
            if(err){
                throw err;
            }
            resolve(stdout);
        });
    }catch(e){
        throw 'Error! running "react-native start" before.';
    }
    
} ) ).then( () => new Promise( (resolve,reject) => {
    
    exec('cd '+path+' && ./gradlew assembleDebug',function(err,stdout,stderr){
        if(err){
            throw err;
        }
        resolve(stdout);
    });
    
} ) ).then( (stdout) => new Promise( (resolve,reject) => {

    result = path+'/app/build/outputs/apk';
    console.log('success. your app file at the '+result);
    
} ) );